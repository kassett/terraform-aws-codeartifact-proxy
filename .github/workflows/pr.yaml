name: PR Validation Workflow

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: codeartifact-proxy

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.3

      - name: Run Tests
        shell: bash
        run: ( cd codeArtifactProxy ; go test -v )

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Dockerfile
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          DEFAULT_BUMP: patch
          DEFAULT_BRANCH: ${{ github.head_ref }}
          DRY_RUN: true

      - name: Replace TRACKED_GIT_VERSION
        shell: bash
        env:
          NEW_VERSION: ${{ steps.tag_version.outputs.new_tag }}
          FILE_PATH: main.tf
        run: |
          cat <<EOF > replace_version.go
          package main
          
          import (
          "fmt"
          "io/ioutil"
          "log"
          "os"
          "regexp"
          )
          
          func main() {
              newVersion := os.Getenv("NEW_VERSION")
              filePath := os.Getenv("FILE_PATH")
              if newVersion == "" || filePath == "" {
                  log.Fatal("Environment variables NEW_VERSION and FILE_PATH must be set")
              }
              content, err := ioutil.ReadFile(filePath)
              if err != nil {
                log.Fatalf("Error reading file: %v", err)
              }
          
              // Adjusted regex to handle potential spaces around the "="
              re := regexp.MustCompile(`(?m)^(\s*TRACKED_GIT_VERSION\s*=\s*")([^"]*)(".*)$`)
              updatedContent := re.ReplaceAllString(string(content), `${1}`+newVersion+`${3}`)
          
              fmt.Print(updatedContent)
              if err = ioutil.WriteFile(filePath, []byte(updatedContent), 0644); err != nil {
                  log.Fatalf("Error writing to file: %v", err)
              }
          }
          
          go run replace_version.go
          rm replace_version.go > /dev/null 2>&1

      - name: Commit Files
        id: commit
        uses: kassett/autocommit-changes@v1
        with:
          commit-message: "Updating tracked Git version in source code"
          branch: ${{ github.head_ref }}
          github-token: ${{ secrets.GITHUB_TOKEN }}