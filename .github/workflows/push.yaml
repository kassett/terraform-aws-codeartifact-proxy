name: Merge to main

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: codeartifact-proxy

jobs:
  merge:
    name: Merge to main
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          DEFAULT_BUMP: patch

      - name: Replace TRACKED_GIT_VERSION
        shell: go
        env:
          NEW_VERSION: ${{ steps.tag_version.outputs.new_tag }}
          FILE_PATH: main.tf
        run: |
          package main
  
          import ("os"; "regexp"; "io/ioutil"; "log")
  
          func main() {
              newVersion := os.Getenv("NEW_VERSION")
              filePath := os.Getenv("FILE_PATH")
              if newVersion == "" || filePath == "" {
                  log.Fatal("Environment variables NEW_VERSION and FILE_PATH must be set")
              }
              content, err := ioutil.ReadFile(filePath)
              if err != nil {
                  log.Fatalf("Error reading file: %v", err)
              }
              re := regexp.MustCompile(`(TRACKED_GIT_VERSION\s*=\s*")([^"]*)(")`)
              updatedContent := re.ReplaceAllString(string(content), `$1`+newVersion+`$3`)
              if err = ioutil.WriteFile(filePath, []byte(updatedContent), 0644); err != nil {
                  log.Fatalf("Error writing to file: %v", err)
              }
          }

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: "${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}"

      - name: Push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          provenance: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          repository: "${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}"
